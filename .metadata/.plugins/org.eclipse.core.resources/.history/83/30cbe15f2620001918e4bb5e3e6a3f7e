// File Header comes here

// JavaDoc class Header comes here
public class ShoppingCartTests {

	/**
	 * Checks whether the total number of items within the cart is incremented after adding one item 
	 * @return true if the test passes without problems, false otherwise
	 */
	public static boolean testCountIncrementedAfterAddingOnlyOneItem() {
		boolean testPassed = true; // boolean local variable evaluated to true if this test passed,
		// false otherwise
		String[] cart = new String[20]; // shopping cart
		int count = 0; // number of items present in the cart (initially the cart is empty)

		// Add an item to the cart
		count = ShoppingCart.add(3, cart, count); // add an item of index 3 to the cart
		// Check that count was incremented
		if (count != 1) {
			System.out.println("Problem detected: After adding only one item to the cart, "
					+ "the cart count should be incremented. But, it was not the case.");
			testPassed = false;
		}
		return testPassed;
	}

	/**
	 * Checks whether add and OccurrencesOf return the correct output when only one item is added to
	 * the cart
	 * 
	 * @return true if test passed without problems, false otherwise
	 */
	public static boolean testAddAndOccurrencesOfForOnlyOneItem() {
		boolean testPassed = true; // evaluated to true if test passed without problems, false otherwise
		// define the shopping cart as an oversize array of elements of type String
		// we can set an arbitrary capacity for the cart - for instance 10
		String[] cart = new String[10]; // shopping cart
		int count = 0; // number of items present in the cart (initially the cart is empty)

		// check that OccurrencesOf returns 0 when called with an empty cart
		if (ShoppingCart.occurrencesOf(10, cart, count) != 0) {
			System.out.println("Problem detected: Tried calling OccurrencesOf() method when the cart is "
					+ "empty. The result should be 0. But, it was not.");
			testPassed = false;
		}

		// add one item to the cart
		count = ShoppingCart.add(0, cart, count); // add an item of index 0 to the cart

		// check that OccurrencesOf("Apples", cart, count) returns 1 after adding the item with key 0
		if (ShoppingCart.occurrencesOf(0, cart, count) != 1) {
			System.out.println("Problem detected: After adding only one item with key 0 to the cart, "
					+ "OccurrencesOf to count how many of that item the cart contains should return 1. "
					+ "But, it was not the case.");
			testPassed = false;
		}
		return testPassed;
	}
	//Checks that items can be added more than one time and are found
	public static boolean testAddOccurrencesOfDuplicateItems() {}

	// Checks that the correct output is returned when the user tries to add too much items to the cart
	// exceeding its capacity
	public static boolean testAddingTooMuchItems() {}
	/**
	 * main method used to call the unit tests
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		System.out.println("testCountIncrementedAfterAddingOnlyOneItem(): "
				+ testCountIncrementedAfterAddingOnlyOneItem());
		System.out.println(
				"testAddAndOccurrencesOfForOnlyOneItem(): " + testAddAndOccurrencesOfForOnlyOneItem());
	}
}