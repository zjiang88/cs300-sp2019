//////////////////// ALL ASSIGNMENTS INCLUDE THIS SECTION /////////////////////
//
// Title:     ShoppingCart   
// Files:     ShoppingCart      
// Course:    CS300,Spring 2019    
//
// Author:    Ziyan Jiang      
// Email:     zjiang88@wisc.edu
// Lecturer's Name: Gary
//
//////////////////// PAIR PROGRAMMERS COMPLETE THIS SECTION ///////////////////
//
// Partner Name:   Chengbin Liu
// Partner Email:   cliu557@wisc.edu
// Partner Lecturer's Name: Gary
// 
// VERIFY THE FOLLOWING BY PLACING AN X NEXT TO EACH TRUE STATEMENT:
//   X___ Write-up states that pair programming is allowed for this assignment.
//   X___ We have both read and understand the course Pair Programming Policy.
//   X___ We have registered our team prior to the team registration deadline.
//
///////////////////////////// CREDIT OUTSIDE HELP /////////////////////////////
//
// Students who get help from sources other than their partner must fully 
// acknowledge and credit those sources of help here.  Instructors and TAs do 
// not need to be credited here, but tutors, friends, relatives, room mates, 
// strangers, and others do.  If you received no outside help from either type
//  of source, then please explicitly indicate NONE.
//
// Persons:         (identify each person and describe their help in detail)
// Online Sources:  (identify each URL and describe their assistance in detail)
//
/////////////////////////////// 80 COLUMNS WIDE ///////////////////////////////
import java.util.*;
public class ShoppingCart{
	// Define final parameters
	private static final int CART_CAPACITY = 20; // shopping cart max capacity
	private static final double TAX_RATE = 0.05; // sales tax

	// a perfect-size two-dimensional array that stores the available items in the market
	// MARKET_ITEMS[i][0] refers to a String that represents the description of the item
	//                   identified by index i
	// MARKET_ITEMS[i][1] refers to a String that represents the unit price of the item
	//                   identified by index i in dollars.
	public static final String[][] MARKET_ITEMS = new String[][] {{"Apple", "$1.59"},
		{"Avocado", "$0.59"}, {"Banana", "$0.49"}, {"Beef", "$3.79"}, {"Blueberry", "$6.89"},
		{"Broccoli", "$1.79"}, {"Butter", "$4.59"}, {"Carrot", "$1.19"}, {"Cereal", "$3.69"},
		{"Cheese", "$3.49"}, {"Chicken", "$5.09"}, {"Chocolate", "$3.19"}, {"Cookie", "$9.5"},
		{"Cucumber", "$0.79"}, {"Eggs", "$3.09"}, {"Grape", "$2.29"}, {"Ice Cream", "$5.39"},
		{"Milk", "$2.09"}, {"Mushroom", "$1.79"}, {"Onion", "$0.79"}, {"Pepper", "$1.99"},
		{"Pizza", "$11.5"}, {"Potato", "$0.69"}, {"Spinach", "$3.09"}, {"Tomato", "$1.79"}};
		
		/**
		 * adds the item with the given its identifier (index) at the end of the cart
		 * @param index represents the index of item to be added 
		 * @param cart represents the shopping cart
		 * @param count  represents the number of market items present in the cart
		 * @return  updated count
		 */
		public static int add(int index, String[] cart, int count) {
			if(cart[cart.length-1]!=null) {
				System.out.println("WARNING: The cart is full. You cannot add any new item.");
				return count;
			}
			cart[count]=MARKET_ITEMS[index][0];
			return count + 1;
		}

		
		/**
		 * 
		 * @param itemIndex means the index of item
		 * @param cart represents the shopping cart
		 * @param count  represents the number of market items present in the cart
		 * @return Returns how many occurrences of the item with index itemIndex are present in the shopping cart
		 */
		public static int occurrencesOf(int itemIndex, String[] cart, int count) {
			int numOfItem = 0;
			for (int i = 0; i < count; i++) {
				if (cart[i].equals(MARKET_ITEMS[itemIndex][0])) {
					numOfItem++;
				}
			}
			return numOfItem;
		}

		
		/**
		 * Removes the first (only one) occurrence of itemToRemove if found and returns the number of 
		 * items in the cart after remove operation is completed either successfully or not
		 * @param itemToRemove represents the item to be removed 
		 * @param cart represents the shopping cart
		 * @param count represents the number of market items present in the cart
		 * @return count after remove operation
		 */
		public static int remove(String itemToRemove, String[] cart, int count) {
			if (count == 0) {
				System.out.println("cart empty");
				return count;
			}
			if(indexOf(itemToRemove, cart, count) == -1) {
				System.out.println("WARNING: " + itemToRemove + " not found in the shopping cart.");
				return count;
			}
			cart[indexOf(itemToRemove, cart, count)] = cart[count - 1];
			cart[count-1] = null;
			count--;
			return count;
		}
		
		
		/**
		 * Returns the index of an item within the shopping cart
		 * 
		 * @param item description
		 * @param cart Shopping cart
		 * @param count number of items present in the shopping cart
		 * @return index of the item within the shopping cart, and -1 if the item does not exist in the
		 *         cart
		 */
		private static int indexOf(String item, String[] cart, int count) {
			for (int i = 0; i < count; i++) {
				if (cart[i].equals(item)) {
					return i;
				}
			}
			return -1;
		}
		
		
		// returns the total value (cost) of the cart without tax in $ (double)
		public static double getSubTotalPrice(String[] cart, int count) {
			double totalPrice = 0.0;
			for(int i = 0; i < count; i++) {
				for(int j = 0; j < MARKET_ITEMS.length; j++) {
					if (cart[i].equals(MARKET_ITEMS[j][0])) {
						totalPrice = totalPrice + Double.valueOf(MARKET_ITEMS[j][1].substring(1));
					}
				}
			}
			return Math.round(totalPrice * 100.0) / 100.0;
		}

		
		// prints the Market Catalog (item identifiers, description, and unit prices)
		public static void printMarketCatalog() {
			System.out.println("+++++++++++++++++++++++++++++++++++++++++++++\n"
					+ "Item id\t\tDescription    \t Price\n" + "+++++++++++++++++++++++++++++++++++++++++++++");
			for (int i = 0; i < MARKET_ITEMS.length; i++) {
				System.out.println(i + "\t\t" + MARKET_ITEMS[i][0] + "    \t " + MARKET_ITEMS[i][1]);
			}
		}

		
		// Displays the cart content (items separated by commas)
		public static void displayCartContent(String[] cart, int count) {
			System.out.print("Cart Content: ");
			for(int i = 0; i < count; i++) {
				System.out.print(cart[i] + ", ");
			}
			System.out.println();
		}
		
		
		public static void main(String[] args) {
			String[] cart = new String[CART_CAPACITY];
			int count = 0;
			System.out.println("=============   Welcome to the Shopping Cart App   =============\n");
			boolean isQuit = false;
			Scanner scnr = new Scanner(System.in);
			while(!isQuit) {
				System.out.println("\nCOMMAND MENU:");
				System.out.println(" [P] print the market catalog\n" + 
						" [A <index>] add one occurrence of an item to the cart given its identifier\n" + 
						" [C] checkout\n" + 
						" [D] display the cart content\n" + 
						" [O <index>] number of occurrences of an item in the cart given its identifier\n" + 
						" [R <index>] remove one occurrence of an item from the cart given its identifier\n" + 
						" [Q]uit the application");
				System.out.print("\nENTER COMMAND: ");
				//Scanner scnr = new Scanner(System.in);
				String in = scnr.next();
				if(in.toLowerCase().equals("p")) {
					printMarketCatalog();
				} else if(in.toLowerCase().equals("a")) {
					count = add(scnr.nextInt(), cart, count);
				} else if(in.toLowerCase().equals("c")) {
					double totalCost = getSubTotalPrice(cart, count) + TAX_RATE * getSubTotalPrice(cart, count);
					System.out.println("#items: " + count + " Subtotal: $" +  String.format("%.2f", 
							getSubTotalPrice(cart, count)) + " Tax: $" + String.format("%.2f",TAX_RATE * getSubTotalPrice(cart, count)) + " TOTAL: $" + 
						    String.format("%.2f", totalCost));
				} else if(in.toLowerCase().equals("d")) {
					displayCartContent(cart, count);
				} else if(in.toLowerCase().equals("o")) {
					int id = scnr.nextInt();
					System.out.println("The number of occurrences of " + MARKET_ITEMS[id][0] + " (id #" + id +") is: " + occurrencesOf(id, cart, count));
				} else if(in.toLowerCase().equals("r")) {
					count = remove(MARKET_ITEMS[scnr.nextInt()][0], cart, count);
					
				} else if(in.toLowerCase().equals("q")){
					isQuit = true;
					System.out.println("=============  Thank you for using this App!!!!!  =============");
				} else {
					continue;
				}
			}
			//scnr.close();
		}
}
